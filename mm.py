#!/usr/bin/env python2

import os, re
import sys
import time

macros = {\
'objs' : '',
'srcs' : '', 
'cxxflags' : '', 
'ldflags' : '', 
'ldstatic' : '', 
'target' : 'main',
'debug' : '-g', 
'compiler': 'g++', 
'dependencies': '',
'time' : time.asctime()}

makefile_name = 'Makefile'

makefile_template = """\
# Makefile
# Generated by Makefile Generater at {time}

TARGET = {target}
CC = {compiler}
OBJS = {objs}
SRCS = {srcs}
CXXFLAGS = {cxxflags}
LDFLAGS = {ldflags}
LDSTATIC = {ldstatic}
DEBUG = {debug}
LINK = $(CC)

# LINK = $(shell fltk-config --use-gl --compile)

.SUFFIXES: .o .cpp
%.o: %.cpp
\t$(CC) $(DEBUG) $(CXXFLAGS) -c $<

all: $(TARGET)
\t$(LINK) -o $(TARGET) $(OBJS) $(LDSTATIC)

$(TARGET): $(OBJS)
{dependencies}

clean:
\t@rm $(OBJS) -vf
\t@rm $(TARGET) -vf
\t@echo "Clean successfully"

# end of Makefile
"""

# get current working directory
pwd = os.getenv('PWD')
# why not just switch to pwd ?
os.chdir(pwd)

def get_filelist(suffixes=None):
    filelist = os.listdir(pwd)
    if not suffixes:
        suffixes = ['cpp', 'c', 'cxx']
    return [name for name in filelist if name.split('.')[-1] in suffixes]

def get_direct_dp(filename):
    dplist = []
    with open(os.path.join(pwd, filename)) as f:
        for line in f:
            match = re.search(r'#include\s+"(.+)"', line)
            if match:
                dplist.append(match.group(1))
    return dplist

# should be able to detect circular dependency ?
def get_dp(srclist):
    headerlist = get_filelist(['h', 'hpp'])
    filedp = dict()
    srcdp = dict()
    # should separate circular detection
    # currently not used, shame
    def dfs(dpset, fileno, filename):
        dpset.add(filename)
        fileno[filename] = counter + 1
        counter += 1
        for dp in filedp[filename]:
            if dp not in dpset:
                dfs(dpset, fileno, dp)
        m = min([fileno[f] for f in filedp[filename]])
        return m

    # initialization
    for file in headerlist + srclist:
        filedp[file] = get_direct_dp(file)
    for file in srclist:
        srcdp[file] = filedp[file]
        for dp in srcdp[file]:
            for dpdp in filedp[dp]:
                if dpdp not in srcdp[file]:
                    srcdp[file].append(dpdp)
    return srcdp

def fill_template(template, macros_dict):
    for key, value in macros_dict.iteritems():
        macro = '{%s}' % key
        template = template.replace(macro, value, 1)
    return template

def generate_makefile():
    if os.path.exists(makefile_name):
        # backup original makefile
        os.rename(makefile_name, makefile_name + '.backup')
        print 'Old Makefile is backuped'
    srcs = get_filelist()
    objs = [name[:name.rfind('.')] + '.o' for name in srcs]
    dpdict = get_dp(srcs)

    macros['srcs'] = ' '.join(srcs)
    macros['objs'] = ' '.join(objs)
    macros['dependencies'] = '\n'.join(['%s : %s' % (obj, ' '.join(dp)) for obj, dp in dpdict.iteritems()])

    with open(makefile_name, 'w') as f:
        f.write(fill_template(makefile_template, macros))

    print 'Generating Makefile successful'

def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == 'help':
            print 'help yourself, read the code!'
        elif sys.argv[1] == 'tolower':
            rename_lower()
        elif sys.argv[1] == 'comp4411':
            """
            using fltk and opengl
            probably also using fltk_images
            """
            macros['cxxflags'] = '$(shell fltk-config --use-gl --use-images --cxxflags ) -I. '
            macros['ldflags'] = '$(shell fltk-config --use-gl --use-images --ldflags ) '
            macros['ldstatic'] = '$(shell fltk-config --use-gl --use-images --ldstaticflags ) '
            generate_makefile()
        else:
            print "Unknown parameters"
    else:
        generate_makefile()

def rename_lower():
    """
    You're stupid, should write a special script for renaming
    """
    filelist = get_filelist(['cpp', 'h', 'hpp', 'c', 'cxx'])
    for file in list:
        os.rename(file, file.lower())
        
if __name__ == '__main__':
    main()
